"use client";

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';

import { getMarketSentimentAnalysis } from '@/lib/actions';
import { AnalyzeMarketSentimentOutput } from '@/ai/flows/analyze-market-sentiment';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { Loader2, Newspaper, Sparkles } from 'lucide-react';

const formSchema = z.object({
  query: z.string().min(3, { message: "Query must be at least 3 characters." }).max(20, { message: "Query is too long." }),
});

export function SentimentAITab() {
  const [result, setResult] = useState<AnalyzeMarketSentimentOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      query: "EUR/USD",
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setResult(null);

    const response = await getMarketSentimentAnalysis({ query: values.query });

    if (response.success && response.data) {
      setResult(response.data);
    } else {
      toast({
        variant: "destructive",
        title: "Analysis Failed",
        description: response.error || "An unknown error occurred.",
      });
    }
    setIsLoading(false);
  }

  return (
    <div className="grid md:grid-cols-3 gap-8">
      <div className="md:col-span-1">
        <Card>
          <CardHeader>
            <CardTitle className="font-headline">AI-Powered Sentiment</CardTitle>
            <CardDescription>Analyze market sentiment for any currency pair or asset.</CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="query"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Asset or Pair</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., EUR/USD, Gold" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Sparkles className="mr-2 h-4 w-4" />}
                  Analyze Sentiment
                </Button>
              </form>
            </Form>
          </CardContent>
        </Card>
      </div>

      <div className="md:col-span-2">
        <Card className="min-h-[300px]">
          <CardHeader>
            <CardTitle className="font-headline">Analysis Report</CardTitle>
            <CardDescription>Generated by AI based on recent news and social media.</CardDescription>
          </CardHeader>
          <CardContent>
            {isLoading && (
              <div className="flex flex-col items-center justify-center h-48 space-y-2">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
                <p className="text-muted-foreground">Analyzing market data...</p>
              </div>
            )}

            {!isLoading && !result && (
              <div className="text-center text-muted-foreground py-16">
                <p>Your sentiment analysis will appear here.</p>
              </div>
            )}

            {result && (
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-semibold font-headline mb-2">Sentiment Summary</h3>
                  <p className="text-muted-foreground whitespace-pre-wrap">{result.sentimentSummary}</p>
                </div>

                {result.supportingNewsItems && result.supportingNewsItems.length > 0 && (
                  <div>
                    <h3 className="text-lg font-semibold font-headline mb-2 flex items-center gap-2">
                      <Newspaper className="h-5 w-5" />
                      Supporting News Items
                    </h3>
                    <ul className="space-y-2 list-disc pl-5 text-muted-foreground">
                      {result.supportingNewsItems.map((item, index) => (
                        <li key={index}>{item}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
